# QueryProvider组件

## 概述

`query-provider.tsx` 实现了TanStack Query的配置和提供者组件，为应用提供数据获取和异步状态管理功能。这个组件创建和配置了QueryClient实例，并使用QueryClientProvider包装应用，使所有组件都能访问React Query的功能。

## 实现细节

组件主要包含以下部分：

1. QueryClient实例配置，设置了默认选项：
   - **staleTime**: 数据过期时间 (5分钟)
   - **gcTime**: 缓存时间 (30分钟)
   - **retry**: 失败重试次数 (1次)
   - **refetchOnWindowFocus**: 窗口聚焦时是否重新获取 (否)

2. QueryProvider组件：
   - 接收children作为props
   - 提供QueryClientProvider
   - 在开发环境中条件性地包含ReactQueryDevtools

## 技术注解

- 创建单例QueryClient实例，应用全局共享
- 配置合理的默认选项，适合大多数API调用场景
- 在开发环境中支持开发工具，提升开发体验
- 设计为独立组件，便于单独使用或与其他Provider组合

## 设计思考

1. **性能优化**: 配置合理的staleTime和gcTime减少不必要的请求
2. **开发体验**: 包含开发工具便于调试
3. **错误处理**: 配置重试策略防止临时错误
4. **用户体验**: 禁用窗口聚焦重新获取，减少不必要的加载

## 与其他模块关系

- 被AppProviders组件使用来提供Query功能
- 为使用TanStack Query的hooks提供必要的上下文
- 未来可用于与API服务或LLM API交互的组件

## 使用示例

```tsx
// 直接使用QueryProvider
import { QueryProvider } from './providers'

function MyApp() {
  return (
    <QueryProvider>
      <MyComponent />
    </QueryProvider>
  )
}

// 在自定义组件中使用React Query
import { useQuery } from '@tanstack/react-query'

function MyComponent() {
  const { data, isLoading, error } = useQuery({
    queryKey: ['myData'],
    queryFn: fetchMyData,
  })
  
  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>
  
  return <div>{data.name}</div>
}
```

## 扩展可能性

未来可以扩展组件功能：

1. 添加全局错误处理
2. 配置自定义缓存策略
3. 添加离线支持
4. 设置重试和退避策略 